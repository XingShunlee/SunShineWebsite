// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ehaiker;

namespace ehaikerv202010.Migrations
{
    [DbContext(typeof(EhaikerContext))]
    [Migration("20201017052459_mvcb")]
    partial class mvcb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ehaiker.Administrator", b =>
                {
                    b.Property<int>("AdministratorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("GroupId");

                    b.Property<string>("LoginIP");

                    b.Property<DateTime?>("LoginTime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("sPermission");

                    b.HasKey("AdministratorID");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("ehaiker.GameStrategies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("GameId");

                    b.Property<DateTime>("LastEditTime");

                    b.Property<int>("Rank");

                    b.Property<string>("ReferAthor");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<int>("readers");

                    b.Property<int>("toplevel");

                    b.HasKey("Id");

                    b.ToTable("GameStrategs");
                });

            modelBuilder.Entity("ehaiker.GameType", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("GameId");

                    b.ToTable("GameTypes");
                });

            modelBuilder.Entity("ehaiker.Models.ChatRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Time");

                    b.Property<string>("customerContent");

                    b.Property<int>("customerId");

                    b.Property<string>("kfContent");

                    b.Property<int>("kfUserId");

                    b.HasKey("RecordId");

                    b.ToTable("chatRecords");
                });

            modelBuilder.Entity("ehaiker.Models.CommentModel", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int>("GameID");

                    b.Property<string>("GameName");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.Property<string>("comment");

                    b.HasKey("CommentID");

                    b.ToTable("CommentTable");
                });

            modelBuilder.Entity("ehaiker.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserName");

                    b.Property<int>("customerId");

                    b.Property<string>("headImg");

                    b.Property<bool>("isOnline");

                    b.Property<int>("kfUserId");

                    b.HasKey("Id");

                    b.ToTable("kefu_customers");
                });

            modelBuilder.Entity("ehaiker.Models.GameModel", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime");

                    b.Property<int>("Gametype");

                    b.Property<string>("ImgDescUri");

                    b.Property<string>("ImgHoverUri");

                    b.Property<string>("ItemName");

                    b.Property<DateTime>("MineTime");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("TopLevel");

                    b.Property<string>("gameDescription");

                    b.Property<float>("grade");

                    b.Property<string>("producer");

                    b.Property<string>("resourcefrom");

                    b.Property<string>("supporter");

                    b.Property<string>("targetUri");

                    b.HasKey("ItemID");

                    b.ToTable("GameLists");
                });

            modelBuilder.Entity("ehaiker.Models.KefuServiceStatus", b =>
                {
                    b.Property<int>("kfUserIndex")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("CurrentPeople");

                    b.Property<int>("GroupId");

                    b.Property<string>("UserName");

                    b.Property<bool>("isOnline");

                    b.Property<int>("kfUserId");

                    b.HasKey("kfUserIndex");

                    b.ToTable("kefu_StatusService");
                });

            modelBuilder.Entity("ehaiker.Models.MemberShip", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("GroupId");

                    b.Property<string>("Icon");

                    b.Property<DateTime?>("LastSignTime");

                    b.Property<string>("LoginIP");

                    b.Property<DateTime?>("LoginTime");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(11);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("SignCount");

                    b.Property<string>("UserName");

                    b.Property<int>("VIPLevel");

                    b.Property<string>("sPermission");

                    b.HasKey("UserId");

                    b.ToTable("MemShips");
                });

            modelBuilder.Entity("ehaiker.Models.MemberShipInfomation", b =>
                {
                    b.Property<int>("IndexId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentityCard");

                    b.Property<decimal>("TMoney");

                    b.Property<decimal>("UMoney");

                    b.Property<int>("UserId");

                    b.Property<bool>("isIdentityValid");

                    b.Property<bool>("isMailValid");

                    b.Property<bool>("isValid");

                    b.HasKey("IndexId");

                    b.ToTable("MemberShipInfomation");
                });

            modelBuilder.Entity("ehaiker.Models.PaybillApproveModel", b =>
                {
                    b.Property<int>("PayBillApproveID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ApproveDeleteMask");

                    b.Property<string>("ApproveForWhat");

                    b.Property<DateTime>("CreateTime");

                    b.Property<int>("PayBillID");

                    b.Property<DateTime>("PayForDateTime");

                    b.Property<int>("PayState");

                    b.Property<int>("PayType");

                    b.HasKey("PayBillApproveID");

                    b.ToTable("PayBillApproveModels");
                });

            modelBuilder.Entity("ehaiker.Models.PaybillModel", b =>
                {
                    b.Property<int>("PayBillID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<bool>("PayDeleteMask");

                    b.Property<DateTime>("PayForDateTime");

                    b.Property<string>("PayForWhat");

                    b.Property<string>("PayIdentity");

                    b.Property<int>("PayState");

                    b.Property<int>("PayType");

                    b.Property<int>("PayValue");

                    b.Property<int>("UserId");

                    b.HasKey("PayBillID");

                    b.ToTable("PayBillModels");
                });

            modelBuilder.Entity("ehaiker.Models.SupplierModel", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImgDescUri");

                    b.Property<string>("ImgHoverUri");

                    b.Property<string>("ItemName");

                    b.Property<string>("hrefUri");

                    b.HasKey("ItemID");

                    b.ToTable("SupplierItems");
                });

            modelBuilder.Entity("ehaiker.NewsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Announcer");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("LastEditTime");

                    b.Property<int>("NewsTypeId");

                    b.Property<int>("Rank");

                    b.Property<string>("ReferAthor");

                    b.Property<DateTime>("ReleaseTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<int>("readers");

                    b.Property<int>("toplevel");

                    b.HasKey("Id");

                    b.ToTable("WebNewses");
                });
#pragma warning restore 612, 618
        }
    }
}
